app:
  telegram-token: ${TELEGRAM_TOKEN}
  kafka-configuration:
    topic-name: topic1
    count-of-partitions: 10
    count-of-replicas: 1
    dlq-topic-name: topic1_dlq
    dlq-count-of-partitions: 10
    dlq-count-of-replicas: 1

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  retry-config:
    constant-backoff-retry:
      max-attempts-expression: 5
      delay-expression: 1000
    linear-backoff-retry:
      max-attempts: 5
      delay: 1000
      max-delay: 3000
      delay-scale: 1000
    exponential-backoff-retry:
      max-attempts-expression: 5
      delay-expression: 1000
      max-delay-expression: 5
      multiplier-expression: 2
    codes-for-retry:
      [ 403, 404, 422, 500, 502, 503, 504 ]
  kafka:
    consumer:
      auto-offset-reset: earliest
      group-id: group1
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            use.type.headers: false
            value.default.type: edu.java.bot.model.requestDTO.LinkUpdateRequest

bucket4j:
  config:
    token-limit: 20
    refill-count: 1
    refill-duration: 2s

server:
  port: 8090

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

scrapper:
  baseUrl: http://localhost:8080

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: info,health,prometheus
      base-path: /
      path-mapping:
          health: health
          prometheus: metrics
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  labels:
    application: ${spring.application.name}
  server:
    port: 8091
