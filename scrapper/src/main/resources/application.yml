app:
  scheduler:
    enable: true
    interval: 10
    force-check-delay: 10
  database-access-type: ${SCRAPPER_DATABASE_ACCESS_TYPE}
  kafka-configuration:
    topic-name: topic1
    count-of-partitions: 10
    count-of-replicas: 1
    dlq-topic-name: topic1_dlq
    dlq-count-of-partitions: 10
    dlq-count-of-replicas: 1
  use-queue: true

spring:
  application:
    name: scrapper
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  liquibase:
    enabled: false
  retry-config:
    constant-backoff-retry:
      max-attempts-expression: 5
      delay-expression: 1000
    linear-backoff-retry:
      max-attempts: 5
      delay: 1000
      max-delay: 3000
      delay-scale: 1000
    exponential-backoff-retry:
      max-attempts-expression: 5
      delay-expression: 1000
      max-delay-expression: 5
      multiplier-expression: 2
    codes-for-retry:
      [ 403, 404, 422, 500, 502, 503, 504 ]
  kafka:
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      auto-offset-reset: earliest
      group-id: group2

bucket4j:
  config:
    token-limit: ${SCRAPPER_TOKEN_LIMIT}
    refill-count: ${SCRAPPER_REFILL_COUNT}
    refill-duration: ${SCRAPPER_REFILL_DURATION}

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

bot:
  base-url: http://${BOT_BASEURL_HOST}:8090

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: info,health,prometheus
      base-path: /
      path-mapping:
        health: health
        prometheus: metrics
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  labels:
    application: ${spring.application.name}
  server:
    port: 8081
